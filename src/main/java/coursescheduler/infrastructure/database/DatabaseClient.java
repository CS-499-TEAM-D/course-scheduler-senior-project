package coursescheduler.infrastructure.database;

import com.google.api.services.sheets.v4.Sheets;
import com.google.api.services.sheets.v4.model.ValueRange;
import coursescheduler.infrastructure.database.objects.User;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.List;


public final class DatabaseClient {

    private final Sheets service;
    private final String spreadhsheetId;

    /**
     *
     * Builds singleton object of the Sheets service object used to make API calls to the remote google sheet
     *
     * @throws IOException
     * @throws GeneralSecurityException
     */
    public DatabaseClient() throws IOException, GeneralSecurityException {
        // Build a new authorized API client service.
        // final String spreadsheetId = "1NNZsNlZRHzTG1w977LBTz_wVJ8YTYgJfLMPCSYWpE6Y"; // <-- LIVE DATA
        final String spreadsheetId = "17hrTlcbE9zvMlg8eH2Q7wsZjzXcCEqYfv_oVBqe4GKc"; // <-- TEST DATA
        Sheets service = SheetsServiceUtil.getSheetsService();
        this.service = service;
        this.spreadhsheetId = spreadsheetId;
    }


    /*
       =========== USER METHODS ===========
     */


    /**
     *
     * @param list 2D List of Objects generated by google sheets service api
     * @param toFind The string you want to find inside the 2D List of Objects
     * @return either the index of the Object that has the string, or -1 if not found
     */
    public Integer indexOfColumn(List<List<Object>> list, String toFind){
        int index = 0;
        for(; index<list.size(); index++){
            if(list.get(index).get(0).equals(toFind)){
                return index + 2; // change to 1 notation and skip header row
            }
        }
        return -1;
    }


    /**
     * @param sheet which sheet you want to fetch a column from
     * @param columnChar which column you want to fetch via char index
     * @return A list object of all the elements of that column
     * @throws IOException
     */
    public List<List<Object>> getColumn(String sheet, char columnChar) throws IOException {
        String userColumn = sheet+"!"+columnChar+"2:"+columnChar; // 2 to end of column, skip header
        ValueRange userRange = service.spreadsheets().values().get(spreadhsheetId, userColumn).execute();
        return userRange.getValues();
    }


    /**
     * @param email takes in a user email to find
     * @return returns the numerical index of that user as it appears in the remote google sheet
     * @throws IOException
     */
    public int findUserIndex(String email) throws IOException {
        // get a list of all the users and find the index of the email passed
        List<List<Object>> users = getColumn("CREDS", 'A');
        return indexOfColumn(users, email);
    }

    /**
     *
     * @param email username of the user to be returned
     * @return either the user object of the given username or null if not found
     * @throws IOException
     */
    public User getUserByName(String email) throws IOException {

        // find user
        int index = findUserIndex(email);
        if(index == -1){
            return null;
        }

        // if user found, fetch information on the user and create a user object to return
        String userToGet = "CREDS!A"+index+":C"+index;
        ValueRange userRange  = service.spreadsheets().values().get(spreadhsheetId, userToGet).execute();
        List<List<Object>> users = userRange.getValues();

        User user = new User(users.get(0).get(0), users.get(0).get(1), users.get(0).get(2));
        System.out.println(users+"\n\n\n"+user);
        return user;
    }

    /**
     *  add a user listing to the remote google sheet
     * @param username email handle of user that will be their user name
     * @param password password for login verification
     * @param role short string logging what role the user has
     * @throws IOException
     */
    public void addUser(String username, String password, String role) throws IOException {
        if(username == null || password == null || role == null || username.equals("") || password.equals("") || role.equals("")){
            throw new IOException("Cannot add a user with missing data to the remote sheet");
        }

        // verify that the user being added does not already exist
        int index = findUserIndex(username);
        if(index == -1){
            throw new IOException("Cannot add new user with a username that already exists");
        }

        // format for adding user to remote sheet
        ValueRange userValueRange = new ValueRange().setValues(Arrays.asList(
              Arrays.asList(username, password, role, "", "=AND(EXACT(B:B,D:D))")
        ));

        // adds user to next empty row
        service.spreadsheets().values().append(spreadhsheetId, "CREDS!A1", userValueRange).setValueInputOption("USER_ENTERED").setInsertDataOption("INSERT_ROWS").execute();
    }

    /**
     * Alternative overload for adding a user with the user object instead of the individual fields
     * @param user user object containing user fields
     * @throws IOException
     */
    public void addUser(User user) throws IOException {
        if(user == null){
            throw new IOException("Cannot add a null user to the remote sheet");
        }
        addUser(user.getName(), user.getPass(), user.getRole());
    }

    /**
     * @param username user that wants to be verified
     * @param password the password submitted by the user that is compared against the remote password
     * @return true if the password inputted matches with remote password, else false
     */
    public boolean verifyUserLogin(String username, String password) throws IOException {
        int index = findUserIndex(username);
        if(index == -1) {
            return false;
        }
        // write password to column d
        // password = hash(password); this will need to be implemented
        ValueRange valueRange = new ValueRange().setValues(Arrays.asList(
                Arrays.asList(password)
        ));
        service.spreadsheets().values().update(spreadhsheetId, "CREDS!D"+index, valueRange).setValueInputOption("RAW").execute();

        // read column e boolean verify that compares password attempt and password saved
        boolean verified = Boolean.parseBoolean(service.spreadsheets().values().get(spreadhsheetId, "CREDS!E"+index).execute().getValues().get(0).get(0).toString());

        // reset column d so previous attempts are not saved
        valueRange.getValues().get(0).set(0, "");
        service.spreadsheets().values().update(spreadhsheetId, "CREDS!D"+index, valueRange).setValueInputOption("RAW").execute();
        return verified;
    }
}

